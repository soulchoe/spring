<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.bs.spring" />
	
	<!-- 
		pojo클래스를 bean으로 등록하기 
		<beans:bean>태그를 이용해서 등록
			속성
			id : context에서 사용하는 bean이름
			class : 대상이 되는 클래스를 지정(패키지명부터 틀래스명까지 전부 작성)
	-->
	<!-- <beans:bean id="bbo" class="com.bs.spring.beantest.Animal"/> -->
	<!-- 내부적으로는 Animal클래스를 default생성자로 생성해서 bean으로 등록 -->
	
	<!-- 
		pojo생성시 setter를 이용해서 데이터를 넣어서 생성시키기
	 -->
	<!--  <beans:bean id="bbo" class="com.bs.spring.beantest.Animal">
	 	<beans:property name="name" value="뽀송"/>
	 	<beans:property name="age" value="3"/>
	 	<beans:property name="height" value="50.4"/>
	 </beans:bean> -->
	 
	 <!-- 매개변수 있는 생성자를 이용해서 생성시키기 -->
	 <beans:bean id="bbo" class="com.bs.spring.beantest.Animal">
	 	<beans:constructor-arg index="0" value="뽀송"/>
	 	<beans:constructor-arg index="1" value="3"/>
	 	<!-- <beans:constructor-arg index="2" value="50.4"/> -->
	</beans:bean>
	
	<beans:bean id="dog" class="com.bs.spring.beantest.Animal">
		<beans:property name="name" value="뽀삐"/>
	</beans:bean>
	
	<!-- 
		lazy-init: getbean을 호출하기 전까지 생성하지 않고 기다림-> 메모리 유리
	 -->
	
	<!-- 클래스 생성 소멸시 실행될 메소드를 빈 안에서 설정해 줄 수 있다 -->
	<beans:bean id="emp" class="com.bs.spring.beantest.Employee" init-method="initialMethod" destroy-method="destroyMethod">
		<beans:property name="name" value="최주영"/>
		<beans:property name="age" value="24"/>
		<beans:property name="address" value="경기도 안양시"/>
		<beans:property name="salary" value="100"/>
		<beans:property name="dept" ref="dept"/>
	</beans:bean>
	<beans:bean id="emp2" class="com.bs.spring.beantest.Employee">
		<beans:constructor-arg index="0" ref="dept"/>
	</beans:bean>
	<!-- 등록하는 빈이 다른 클래스와 연관관계(참조)가 설정되어있을 때는 다른 빈을 등록해야한다. 이때 속성값으로 ref라는 속성을 이용한다 -->
	<beans:bean id="dept" class="com.bs.spring.beantest.Department">
		<beans:constructor-arg index="0" value="1"/>
		<beans:constructor-arg index="1" value="개발부"/>
		<beans:constructor-arg index="2" value="판교"/>
	</beans:bean>
	
	
	<!-- 인터셉터 등록하기-->
	<interceptors>
		<interceptor>
			<mapping path="/demo/*"/>
			<!-- <exclude-mapping path="/demo/demo.do"/> -->
			<beans:bean class="com.bs.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<!-- <interceptor>
			<mapping path="/demo/selectDemoAll.do"/>
			<mapping path="/memo/*"/>
			<beans:ref bean="loginCheck"/>
		</interceptor>
		<interceptor>
			<mapping path="/memo/*"/>
			<beans:ref bean="adminCheck"/>
		</interceptor> -->
		<interceptor>
			<mapping path="/board/*"/>
			<beans:ref bean="loginCheck"/>
		</interceptor>
	</interceptors>
	<beans:bean id="loginCheck" class="com.bs.spring.common.interceptor.LoginCheckInterceptor"/>
	<beans:bean id="adminCheck" class="com.bs.spring.common.interceptor.AdminCheckInterceptor"/>
	
	<beans:import resource="../root-context.xml"/><!-- 다른 configuration을 가져올 수 있음 -->

	<!-- 
		파일업로드를 처리할 리졸버 등록하기
		CommonMultipartRresolver클래스를 빈으로 등록
	 -->
	 <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<beans:property name="maxUploadSize" value="104857600"/>
	 </beans:bean>


</beans:beans>